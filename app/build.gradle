apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

def keystorePropertiesFile = rootProject.file("../iPay_KeyStore/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def appPropertiesFile = rootProject.file("app-settings.properties")
def appProperties = new Properties()
appProperties.load(new FileInputStream(appPropertiesFile))
def envProperties

android {
    compileSdkVersion appProperties['sdk.version.compile'] as int
    buildToolsVersion appProperties['build.tool.version']

    signingConfigs {
        iPaySigningConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "bd.com.ipay.android"
        minSdkVersion appProperties['sdk.version.min'] as int
        targetSdkVersion appProperties['sdk.version.target'] as int
        multiDexEnabled true
        versionCode appProperties['app.version.code'] as int
        versionName appProperties['app.version.name']
        vectorDrawables.useSupportLibrary = true

        def buildVariant = getBuildVariant()
        def environmentPath
        environmentPath = appProperties["env.path.$buildVariant"]

        def envPropertiesFile = rootProject.file(environmentPath)
        envProperties = new Properties()
        envProperties.load(new FileInputStream(envPropertiesFile))
        println("buildVariant = $buildVariant")
        for (String key : envProperties.keySet()) {
            buildConfigField "String", key.replaceAll("\\.", "_").toUpperCase(), "\"" + envProperties[key] + "\""
        }
        manifestPlaceholders = [iPayUrl: (envProperties["base.url.ipay"] as String).replace("https://", "")]
        vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.iPaySigningConfig
        }
        BuildTest {
            debuggable true
            signingConfig signingConfigs.iPaySigningConfig
        }
        BuildDev {
            debuggable true
            signingConfig signingConfigs.iPaySigningConfig
        }
        BuildStage {
            debuggable true
            signingConfig signingConfigs.iPaySigningConfig
        }
        BuildDemo {
            debuggable true
            signingConfig signingConfigs.iPaySigningConfig
        }
        BuildLocal {
            debuggable true
            signingConfig signingConfigs.iPaySigningConfig
        }
        release {
            signingConfig signingConfigs.iPaySigningConfig
            minifyEnabled appProperties["minify.enabled"] as boolean
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/fonts'] } }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
}

android.packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/ASL2.0'
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':camera')
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'android.arch.lifecycle:livedata:1.1.1'
    implementation 'android.arch.lifecycle:viewmodel:1.1.1'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:mediarouter-v7:28.0.0'
    implementation 'com.android.support:customtabs:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.journeyapps:zxing-android-embedded:3.0.1@aar'
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.airbnb.android:lottie:2.5.1'
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation 'com.github.bumptech.glide:glide:3.8.0'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation('com.github.afollestad.material-dialogs:core:0.8.5.3@aar') {
        transitive = true
    }

    // Bottom Sheet
    implementation 'com.flipboard:bottomsheet-core:1.5.0'
    implementation 'com.flipboard:bottomsheet-commons:1.5.0'

    implementation 'com.googlecode.libphonenumber:libphonenumber:8.9.13'
    implementation 'com.github.johnkil.android-progressfragment:progressfragment:1.4.0'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'com.google.firebase:firebase-core:16.0.5'
    implementation 'com.google.android.gms:play-services-places:16.0.0'
    implementation 'com.google.android.gms:play-services-vision:17.0.2'
    implementation 'com.google.android.gms:play-services-analytics:16.0.5'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.firebase:firebase-client-android:2.4.0'
    implementation 'com.github.drawers:SpinnerDatePicker:1.0.6'
    // Notification badge
    implementation 'com.mikepenz:actionitembadge:3.2.6@aar'
    implementation 'com.mikepenz:iconics-core:2.6.6@aar'

    // Aspect
    implementation 'org.aspectj:aspectjrt:1.9.1'

    // Multiple image picker
    implementation 'com.github.esafirm.android-image-picker:imagepicker:1.3.2@aar'

    //Intercom
    implementation 'io.intercom.android:intercom-sdk-base:5.1.6'
    implementation 'io.intercom.android:intercom-sdk-fcm:5.1.6'

    // Singapore
    implementation 'com.hbb20:ccp:1.7.8'
    //facebook sdk
    implementation 'com.facebook.android:facebook-android-sdk:4.38.1'
}

def getBuildVariant() {
    for (TaskExecutionRequest t : gradle.getStartParameter().getTaskRequests()) {
        for (String command : t.args) {
            if (command.matches(":app:generate(.*)Sources")) {
                return command.replaceAll(":app:generate(.*)Sources", "\$1")
                        .toLowerCase()
                        .replaceAll("debug", "test").replaceAll("build", "")
            } else if (command.matches(":app:assemble(.*)")) {
                return command.replaceAll(":app:assemble(.*)", "\$1")
                        .toLowerCase()
                        .replaceAll("debug", "release").replaceAll("build", "")
            }
        }
    }

    return "release"
}

final def log = project.logger
final def variants = project.android.applicationVariants
variants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}
